// Stats: "Auth" : '["0-Games", "1-Wins", "2-Draws", "3-Losses", "4-Winrate", "5-Goals", "6-Assists", "7-GK", "8-CS", "9-CS%", "10-Role", "11-Nick"]'

/* VARIABLES */

/* ROOM */

const roomName = "üîµ‚ö™üîµ BIG EASY 4v4 | üèÖ ARSA-BIG üèÜ";
const botName = "‚ö°ARSA-BOT"
const maxPlayers = 30;
const roomPublic = true;
var lat = -34.5;
var long = -58.4;
const room = HBInit({ roomName: roomName, maxPlayers: maxPlayers, public: roomPublic, playerName: botName, geo: {"code": "AR", "lat": lat, "lon": long }});

const scoreLimitClassic = 3;
const scoreLimitBig = 3;
const timeLimitClassic = 3;
const timeLimitBig = 3;

const frasesgoles = [" Mira que te como dij√≥ ", " ¬°Vestite que no se puede jugar desnudo en la cancha ", " Apareciendo cuando mas se le necesita, el amo y se√±or de haxball ", " est√°s on fire üî•üî•üî• ", " Increible el golazo de ", " Futbol champagne se√±ores! de parte de ", " ¬°BARRILETE COSMICO! ¬øDe que planeta viniste? ", " Impresionante definicion de ", " Que locura de gol acaba de hacer "];
const frasesasis = [" üî•üî•¬°Y el pase milimetrico de ", " ¬°Y donde pone el ojo pone el pase ", " ¬°con tremendo pase de ", " ¬°asistencia fenomenal de ", " ¬°pase milimetrico de "];
const frasesautogol = [" ¬°Prende el monitor! ", " Para que te trajeee ", " ¬°El troll de troles es ", " ¬°Increible lo que hace este muchacho, pero ser√≠a mejor hacerlo en el arco contrario ", " ¬°Genial ahora en el otro arco ", " ¬°Se equivoco de arco ", " ¬°Para el otro lado "];

var isTimeAddedShown = false;
var isTimeAddedShowndos = false;
var isTimeAddedShowntres = false;
var isTimeAddedShowncuatro = false;
var isTimeAddedShowncinco = false;
var isTimeAddedShownseis = false;
var isTimeAddedShownquince = false;
var isTimeAddedShownsiete = false;

room.setKickRateLimit(6, 0, 0);
room.setTeamsLock(true);

var adminPassword = 1000 + getRandomInt(9000);
console.log("adminPassword : " + adminPassword);

/* STADIUM */

const playerRadius = 15;
var ballRadius = 6.25;
const triggerDistance = playerRadius + ballRadius + 0.01;
var aloneMap = `
{

	"name" : "Practica",

	"width" : 420,

	"height" : 200,

	"bg" : { "type" : "grass", "width" : 370, "height" : 170, "kickOffRadius" : 75, "color" : "6a9158" },

	"vertexes" : [
		/* 0 */ { "x" : 378, "y" : -64, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "034fb1" },
		/* 1 */ { "x" : 378, "y" : 64, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "034fb1" },
		/* 2 */ { "x" : 400, "y" : -42, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "034fb1" },
		/* 3 */ { "x" : 400, "y" : 42, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "034fb1" },
		/* 4 */ { "x" : -378, "y" : -64, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "c80000" },
		/* 5 */ { "x" : -378, "y" : 64, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "c80000" },
		/* 6 */ { "x" : -400, "y" : -42, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "c80000" },
		/* 7 */ { "x" : -400, "y" : 42, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "c80000" },
		/* 8 */ { "x" : 0, "y" : -200, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 9 */ { "x" : 0, "y" : -75, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 10 */ { "x" : 0, "y" : 75, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 11 */ { "x" : 0, "y" : 200, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 12 */ { "x" : -370, "y" : -170, "cMask" : [ ] },
		/* 13 */ { "x" : 370, "y" : -170, "cMask" : [ ] },
		/* 14 */ { "x" : 370, "y" : -64, "cMask" : [ ] },
		/* 15 */ { "x" : 370, "y" : 64, "cMask" : [ ] },
		/* 16 */ { "x" : 370, "y" : 170, "cMask" : [ ] },
		/* 17 */ { "x" : -370, "y" : 170, "cMask" : [ ] },
		/* 18 */ { "x" : -370, "y" : 64, "cMask" : [ ] },
		/* 19 */ { "x" : -370, "y" : -64, "cMask" : [ ] }

	],

	"segments" : [
		{ "v0" : 0, "v1" : 2, "bCoef" : 0.1, "curve" : 89.99999999999999, "curveF" : 1.0000000000000002, "cMask" : ["ball" ], "color" : "034fb1" },
		{ "v0" : 3, "v1" : 2, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "034fb1" },
		{ "v0" : 3, "v1" : 1, "bCoef" : 0.1, "curve" : 89.99999999999999, "curveF" : 1.0000000000000002, "cMask" : ["ball" ], "color" : "034fb1" },
		{ "v0" : 6, "v1" : 4, "bCoef" : 0.1, "curve" : 89.99999999999999, "curveF" : 1.0000000000000002, "cMask" : ["ball" ], "color" : "c80000" },
		{ "v0" : 7, "v1" : 6, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "c80000" },
		{ "v0" : 5, "v1" : 7, "bCoef" : 0.1, "curve" : 89.99999999999999, "curveF" : 1.0000000000000002, "cMask" : ["ball" ], "color" : "c80000" },
		{ "v0" : 8, "v1" : 9, "bCoef" : 0.1, "vis" : false, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		{ "v0" : 10, "v1" : 11, "bCoef" : 0.1, "vis" : false, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		{ "v0" : 9, "v1" : 10, "bCoef" : 0.1, "curve" : 180, "curveF" : 6.123233995736766e-17, "vis" : false, "cMask" : ["red","blue" ], "cGroup" : ["redKO" ] },
		{ "v0" : 10, "v1" : 9, "bCoef" : 0.1, "curve" : 180, "curveF" : 6.123233995736766e-17, "vis" : false, "cMask" : ["red","blue" ], "cGroup" : ["blueKO" ] },
		{ "v0" : 13, "v1" : 14, "vis" : false, "cMask" : ["ball" ] },
		{ "v0" : 15, "v1" : 16, "vis" : false, "cMask" : ["ball" ] },
		{ "v0" : 17, "v1" : 18, "vis" : false, "cMask" : ["ball" ] },
		{ "v0" : 19, "v1" : 12, "vis" : false, "cMask" : ["ball" ] }

	],

	"planes" : [
		{ "normal" : [0,1 ], "dist" : -200, "bCoef" : 0 },
		{ "normal" : [0,-1 ], "dist" : -200, "bCoef" : 0 },
		{ "normal" : [1,0 ], "dist" : -420, "bCoef" : 0 },
		{ "normal" : [-1,0 ], "dist" : -420, "bCoef" : 0 },
		{ "normal" : [0,1 ], "dist" : -170, "cMask" : ["ball" ] },
		{ "normal" : [0,-1 ], "dist" : -170, "cMask" : ["ball" ] }

	],

	"goals" : [
		

	],

	"discs" : [
		{ "color" : "e5daac", "cGroup" : ["ball","kick","score"] },
		{ "pos" : [370,-64 ], "radius" : 8, "invMass" : 0, "color" : "1dd3eb" },
		{ "pos" : [370,64 ], "radius" : 8, "invMass" : 0, "color" : "1dd3eb" },
		{ "pos" : [-370,-64 ], "radius" : 8, "invMass" : 0, "color" : "e46262" },
		{ "pos" : [-370,64 ], "radius" : 8, "invMass" : 0, "color" : "e46262" }

	],

	"playerPhysics" : {
		

	},
	"ballPhysics" : "disc0",

	"spawnDistance" : 277.5,

	"traits" : {
		

	}
}`;
var classicMap = `
{

	"name" : "Classic",

	"width" : 420,

	"height" : 200,

	"bg" : { "type" : "grass", "width" : 370, "height" : 170, "kickOffRadius" : 75, "color" : "6a9158" },

	"vertexes" : [
		/* 0 */ { "x" : 378, "y" : -64, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "034fb1" },
		/* 1 */ { "x" : 378, "y" : 64, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "034fb1" },
		/* 2 */ { "x" : 400, "y" : -42, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "034fb1" },
		/* 3 */ { "x" : 400, "y" : 42, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "034fb1" },
		/* 4 */ { "x" : -378, "y" : -64, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "c80000" },
		/* 5 */ { "x" : -378, "y" : 64, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "c80000" },
		/* 6 */ { "x" : -400, "y" : -42, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "c80000" },
		/* 7 */ { "x" : -400, "y" : 42, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "c80000" },
		/* 8 */ { "x" : 0, "y" : -200, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 9 */ { "x" : 0, "y" : -75, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 10 */ { "x" : 0, "y" : 75, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 11 */ { "x" : 0, "y" : 200, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 12 */ { "x" : -370, "y" : -170, "cMask" : [ ] },
		/* 13 */ { "x" : 370, "y" : -170, "cMask" : [ ] },
		/* 14 */ { "x" : 370, "y" : -64, "cMask" : [ ] },
		/* 15 */ { "x" : 370, "y" : 64, "cMask" : [ ] },
		/* 16 */ { "x" : 370, "y" : 170, "cMask" : [ ] },
		/* 17 */ { "x" : -370, "y" : 170, "cMask" : [ ] },
		/* 18 */ { "x" : -370, "y" : 64, "cMask" : [ ] },
		/* 19 */ { "x" : -370, "y" : -64, "cMask" : [ ] }

	],

	"segments" : [
		{ "v0" : 0, "v1" : 2, "bCoef" : 0.1, "curve" : 89.99999999999999, "curveF" : 1.0000000000000002, "cMask" : ["ball" ], "color" : "034fb1" },
		{ "v0" : 3, "v1" : 2, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "034fb1" },
		{ "v0" : 3, "v1" : 1, "bCoef" : 0.1, "curve" : 89.99999999999999, "curveF" : 1.0000000000000002, "cMask" : ["ball" ], "color" : "034fb1" },
		{ "v0" : 6, "v1" : 4, "bCoef" : 0.1, "curve" : 89.99999999999999, "curveF" : 1.0000000000000002, "cMask" : ["ball" ], "color" : "c80000" },
		{ "v0" : 7, "v1" : 6, "bCoef" : 0.1, "cMask" : ["ball" ], "color" : "c80000" },
		{ "v0" : 5, "v1" : 7, "bCoef" : 0.1, "curve" : 89.99999999999999, "curveF" : 1.0000000000000002, "cMask" : ["ball" ], "color" : "c80000" },
		{ "v0" : 8, "v1" : 9, "bCoef" : 0.1, "vis" : false, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		{ "v0" : 10, "v1" : 11, "bCoef" : 0.1, "vis" : false, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		{ "v0" : 9, "v1" : 10, "bCoef" : 0.1, "curve" : 180, "curveF" : 6.123233995736766e-17, "vis" : false, "cMask" : ["red","blue" ], "cGroup" : ["redKO" ] },
		{ "v0" : 10, "v1" : 9, "bCoef" : 0.1, "curve" : 180, "curveF" : 6.123233995736766e-17, "vis" : false, "cMask" : ["red","blue" ], "cGroup" : ["blueKO" ] },
		{ "v0" : 13, "v1" : 14, "vis" : false, "cMask" : ["ball" ] },
		{ "v0" : 15, "v1" : 16, "vis" : false, "cMask" : ["ball" ] },
		{ "v0" : 17, "v1" : 18, "vis" : false, "cMask" : ["ball" ] },
		{ "v0" : 19, "v1" : 12, "vis" : false, "cMask" : ["ball" ] }

	],

	"planes" : [
		{ "normal" : [0,1 ], "dist" : -200, "bCoef" : 0 },
		{ "normal" : [0,-1 ], "dist" : -200, "bCoef" : 0 },
		{ "normal" : [1,0 ], "dist" : -420, "bCoef" : 0 },
		{ "normal" : [-1,0 ], "dist" : -420, "bCoef" : 0 },
		{ "normal" : [0,1 ], "dist" : -170, "cMask" : ["ball" ] },
		{ "normal" : [0,-1 ], "dist" : -170, "cMask" : ["ball" ] }

	],

	"goals" : [
		{ "p0" : [370,-64 ], "p1" : [370,64 ], "team" : "blue" },
		{ "p0" : [-370,-64 ], "p1" : [-370,64 ], "team" : "red" }

	],

	"discs" : [
		{ "color" : "e5daac", "cGroup" : ["ball","kick","score"] },
		{ "pos" : [370,-64 ], "radius" : 8, "invMass" : 0, "color" : "1dd3eb" },
		{ "pos" : [370,64 ], "radius" : 8, "invMass" : 0, "color" : "1dd3eb" },
		{ "pos" : [-370,-64 ], "radius" : 8, "invMass" : 0, "color" : "e46262" },
		{ "pos" : [-370,64 ], "radius" : 8, "invMass" : 0, "color" : "e46262" }

	],

	"playerPhysics" : {
		

	},

	"ballPhysics" : "disc0",


	"spawnDistance" : 277.5,

	"traits" : {
		

	}
}`; // Insert your map for 1v1 and 2v2 here. To get minimum file size, here are the instructions : 1. Download the map 2. Go to https://cssminifier.com 3. Paste the result
var bigMap = `{"name":"Big Easy | ARSA BIG by Rodwell","width":600,"height":270,"bg":{"type":"grass","width":550,"height":240,"kickOffRadius":80},"vertexes":[{"x":558,"y":-95,"bCoef":0.1,"cMask":["ball"]},{"x":558,"y":95,"bCoef":0.1,"cMask":["ball"]},{"x":580,"y":-73,"bCoef":0.1,"cMask":["ball"]},{"x":580,"y":73,"bCoef":0.1,"cMask":["ball"]},{"x":-558,"y":-95,"bCoef":0.1,"cMask":["ball"]},{"x":-558,"y":95,"bCoef":0.1,"cMask":["ball"]},{"x":-580,"y":-73,"bCoef":0.1,"cMask":["ball"]},{"x":-580,"y":73,"bCoef":0.1,"cMask":["ball"]},{"x":0,"y":-270,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":0,"y":-80,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":0,"y":80,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":0,"y":270,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":-550,"y":-240,"cMask":[]},{"x":550,"y":-240,"cMask":[]},{"x":550,"y":-95,"cMask":[]},{"x":550,"y":95,"cMask":[]},{"x":550,"y":240,"cMask":[]},{"x":-550,"y":240,"cMask":[]},{"x":-550,"y":95,"cMask":[]},{"x":-550,"y":-95,"cMask":[]}],"segments":[{"v0":0,"v1":2,"bCoef":0.1,"curve":89.99999999999999,"curveF":1.0000000000000002,"cMask":["ball"]},{"v0":3,"v1":2,"bCoef":0.1,"cMask":["ball"]},{"v0":3,"v1":1,"bCoef":0.1,"curve":89.99999999999999,"curveF":1.0000000000000002,"cMask":["ball"]},{"v0":6,"v1":4,"bCoef":0.1,"curve":89.99999999999999,"curveF":1.0000000000000002,"cMask":["ball"]},{"v0":7,"v1":6,"bCoef":0.1,"cMask":["ball"]},{"v0":5,"v1":7,"bCoef":0.1,"curve":89.99999999999999,"curveF":1.0000000000000002,"cMask":["ball"]},{"v0":8,"v1":9,"bCoef":0.1,"vis":false,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"v0":10,"v1":11,"bCoef":0.1,"vis":false,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"v0":9,"v1":10,"bCoef":0.1,"curve":180,"curveF":6.123233995736766e-17,"vis":false,"cMask":["red","blue"],"cGroup":["redKO"]},{"v0":10,"v1":9,"bCoef":0.1,"curve":180,"curveF":6.123233995736766e-17,"vis":false,"cMask":["red","blue"],"cGroup":["blueKO"]},{"v0":13,"v1":14,"vis":false,"cMask":["ball"]},{"v0":15,"v1":16,"vis":false,"cMask":["ball"]},{"v0":17,"v1":18,"vis":false,"cMask":["ball"]},{"v0":19,"v1":12,"vis":false,"cMask":["ball"]}],"planes":[{"normal":[0,1],"dist":-270,"bCoef":0},{"normal":[0,-1],"dist":-270,"bCoef":0},{"normal":[1,0],"dist":-600,"bCoef":0},{"normal":[-1,0],"dist":-600,"bCoef":0},{"normal":[0,1],"dist":-240,"cMask":["ball"]},{"normal":[0,-1],"dist":-240,"cMask":["ball"]}],"goals":[{"p0":[550,-95],"p1":[550,95],"team":"blue"},{"p0":[-550,-95],"p1":[-550,95],"team":"red"}],"discs":[{"cGroup":["ball","kick","score"]},{"pos":[550,-95],"radius":8,"invMass":0,"color":"CCCCFF"},{"pos":[550,95],"radius":8,"invMass":0,"color":"CCCCFF"},{"pos":[-550,-95],"radius":8,"invMass":0,"color":"FFCCCC"},{"pos":[-550,95],"radius":8,"invMass":0,"color":"FFCCCC"}],"playerPhysics":{"acceleration":0.11},"ballPhysics":"disc0","spawnDistance":400}`; // Read above

/* OPTIONS */

var afkLimit = 12;
var drawTimeLimit = Infinity;
var maxTeamSize = 4; // This works for 1 (you might want to adapt things to remove some useless stats in 1v1 like assist or cs), 2, 3 or 4
var slowMode = 0;

/* PLAYERS */

const Team = { SPECTATORS: 0, RED: 1, BLUE: 2 };
var extendedP = [];
const eP = { ID: 0, AUTH: 1, CONN: 2, AFK: 3, ACT: 4, GK: 5, MUTE: 6 };
const Ss = { GA: 0, WI: 1, DR: 2, LS: 3, WR: 4, GL: 5, AS: 6, GK: 7, CS: 8, CP: 9, RL: 10, NK: 11}
var players;
var teamR;
var teamB;
var teamS;

/* GAME */

var lastTeamTouched;
var lastPlayersTouched; // These allow to get good goal notifications (it should be lastPlayersKicked, waiting on a next update to get better track of shots on target)
var countAFK = false; // Created to get better track of activity
var activePlay = false; // Created to get better track of the possession
var goldenGoal = false;
var SMSet = new Set(); // Set created to get slow mode which is useful in chooseMode
var banList = []; // Getting track of the bans, so we can unban ppl if we want

/* STATS */

var game;
var GKList = ["",""];
var Rposs = 0;
var Bposs = 0;
var point = [{"x": 0, "y": 0}, {"x": 0, "y": 0}]; // created to get ball speed
var ballSpeed;
var lastWinner = Team.SPECTATORS;
var streak = 0;
var allBlues = []; // This is to count the players who should be counted for the stats. This includes players who left after the game has started, doesn't include those who came too late or ...
var allReds = []; // ... those who came in a very unequal game.

/* BALANCE & CHOOSE */

var inChooseMode = false; // This variable enables to distinguish the 2 phases of playing and choosing which should be dealt with very differently
var redCaptainChoice = "";
var blueCaptainChoice = "";
var chooseTime = 20;
var timeOutCap;

/* AUXILIARY */

var checkTimeVariable = false; // This is created so the chat doesn't get spammed when a game is ending via timeLimit
var statNumber = 0; // This allows the room to be given stat information every X minutes
var endGameVariable = false; // This variable with the one below helps distinguish the cases where games are stopped because they have finished to the ones where games are stopped due to player movements or resetting teams
var resettingTeams = false;
var capLeft = false;
var statInterval = 6;

loadMap(aloneMap, 0, 0);

/* OBJECTS */

function Goal(time, team, striker, assist) {
	this.time = time;
	this.team = team;
	this.striker = striker;
	this.assist = assist;
}

function Game(date, scores, goals) {
	this.date = date;
	this.scores = scores;
	this.goals = goals;
}

/* FUNCTIONS */

/* AUXILIARY FUNCTIONS */

function getRandomInt(max) { // returns a random number from 0 to max-1
	return Math.floor(Math.random() * Math.floor(max)); 
}

function getTime(scores) { // returns the current time of the game
	return "[" + Math.floor(Math.floor(scores.time/60)/10).toString() + Math.floor(Math.floor(scores.time/60)%10).toString() + ":" + Math.floor(Math.floor(scores.time - (Math.floor(scores.time/60) * 60))/10).toString() + Math.floor(Math.floor(scores.time - (Math.floor(scores.time/60) * 60))%10).toString() + "]"
}

function pointDistance(p1, p2) {
	var d1 = p1.x - p2.x;
	var d2 = p1.y - p2.y;
	return Math.sqrt(d1 * d1 + d2 * d2);
}

/* BUTTONS */

function topBtn() {
	if (teamS.length == 0) {
		return;
	}
	else {
		if (teamR.length == teamB.length) {
			if (teamS.length > 1) {
				room.setPlayerTeam(teamS[0].id, Team.RED);
				room.setPlayerTeam(teamS[1].id, Team.BLUE);
			}
			return;
		}
		else if (teamR.length < teamB.length) {
			room.setPlayerTeam(teamS[0].id, Team.RED);
		}
		else {
			room.setPlayerTeam(teamS[0].id, Team.BLUE);
		}
	}
}

function randomBtn() {
	if (teamS.length == 0) {
		return;
	}
	else {
		if (teamR.length == teamB.length) {
			if (teamS.length > 1) {
				var r = getRandomInt(teamS.length);
				room.setPlayerTeam(teamS[r].id, Team.RED);
				teamS = teamS.filter((spec) => spec.id != teamS[r].id);
				room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
			}
			return;
		}
		else if (teamR.length < teamB.length) {
			room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.RED);
		}
		else {
			room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
		}
	}
}

function blueToSpecBtn() {
	resettingTeams = true;
	setTimeout(() => { resettingTeams = false; }, 100);
	for (var i = 0; i < teamB.length; i++) {
		room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	}
}

function redToSpecBtn() {
	resettingTeams = true;
	setTimeout(() => { resettingTeams = false; }, 100);
	for (var i = 0; i < teamR.length; i++) {
		room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	}
}

function resetBtn() {
	resettingTeams = true;
	setTimeout(() => { resettingTeams = false; }, 100);
	if (teamR.length <= teamB.length) {
		for (var i = 0; i < teamR.length; i++) {
			room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
			room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
		}
		for (var i = teamR.length; i < teamB.length; i++) {
			room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
		}
	}
	else {
		for (var i = 0; i < teamB.length; i++) {
			room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
			room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
		}
		for (var i = teamB.length; i < teamR.length; i++) {
			room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
		}
	}
}

function blueToRedBtn() {
	resettingTeams = true;
	setTimeout(() => { resettingTeams = false; }, 100);
	for (var i = 0; i < teamB.length; i++) {
		room.setPlayerTeam(teamB[i].id, Team.RED);
	}
}

/* GAME FUNCTIONS */

function checkTime() {
	const scores = room.getScores();
	game.scores = scores;
	if (Math.abs(scores.time - scores.timeLimit) <= 0.01 && scores.timeLimit != 0) {
		if (scores.red != scores.blue) {
			if (checkTimeVariable == false) {
				checkTimeVariable = true;
				setTimeout(() => { checkTimeVariable = false; }, 3000);
				scores.red > scores.blue ? endGame(Team.RED) : endGame(Team.BLUE);
				setTimeout(() => { room.stopGame(); }, 2000);
			}
			return;
		}
		goldenGoal = true;
		room.sendChat("‚öΩ Gol gana !");
	}
	if (Math.abs(drawTimeLimit * 60 - scores.time - 60) <= 0.01 && players.length > 2) {
		if (checkTimeVariable == false) {
			checkTimeVariable = true;
			setTimeout(() => { checkTimeVariable = false; }, 10);
			room.sendChat("‚åõ Quedan 60 segundos para que termine el partido !");
		}
	}
	if (Math.abs(scores.time - drawTimeLimit * 60) <= 0.01 && players.length > 2) {
		if (checkTimeVariable == false) {
			checkTimeVariable = true;
			setTimeout(() => { checkTimeVariable = false; }, 10);
			endGame(Team.SPECTATORS);
			room.stopGame();
			goldenGoal = false;
		}
	}
}

function endGame(winner) { // handles the end of a game : no stopGame function inside
	players.length >= 2 * maxTeamSize - 1 ? activateChooseMode() : null;
	const scores = room.getScores();
	game.scores = scores;
	Rposs = Rposs/(Rposs+Bposs);
	Bposs = 1 - Rposs;
	lastWinner = winner;
	endGameVariable = true;
	if (winner == Team.RED) {
		streak++;
		room.sendChat("üî¥ El Red Team gan√≥ " + scores.red + "-" + scores.blue + " ! Victorias consecutivas : " + streak + " üèÜ");
	}
	else if (winner == Team.BLUE) {
		streak = 1;
		room.sendChat("üîµ El Blue Team gan√≥ " + scores.blue + "-" + scores.red + " ! Victorias consecutivas : " + streak + " üèÜ");
	}
	else {
		streak = 0;
		room.sendChat("üí§ L√≠mite de empate, terminado! üí§");
    }
    room.sendChat("‚≠ê Posesi√≥n del bal√≥n : üî¥ " + (Rposs*100).toPrecision(3).toString() + "% : " + (Bposs*100).toPrecision(3).toString() + "% üîµ");
    scores.red == 0 ? (scores.blue == 0 ? room.sendChat("üèÜ " + GKList[0].name + " y " + GKList[1].name + " mantuvieron la valla invicta ! ") : room.sendChat("üèÜ " + GKList[1].name + " mantuvo la valla invicta ! ")) : scores.blue == 0 ? room.sendChat("üèÜ " + GKList[0].name + " mantuvo la valla invicta ! ") : null;
	updateStats();
}

function quickRestart() {
	room.stopGame();
	setTimeout(() => { room.startGame(); }, 2000);
}

function resumeGame() {
	setTimeout(() => { room.startGame(); }, 2000);
	setTimeout(() => { room.pauseGame(false); }, 1000);
}

function activateChooseMode() {
	inChooseMode = true;
	slowMode = 2;
	room.sendChat("Modo lento activado (2 segundos)!");
}

function deactivateChooseMode() {
	inChooseMode = false;
	clearTimeout(timeOutCap);
	if (slowMode != 0) {
		slowMode = 0;
		room.sendChat("Modo lento terminado.");
	}
	redCaptainChoice = "";
	blueCaptainChoice = "";
}

function loadMap(map, scoreLim, timeLim) {
	if (map == aloneMap) {
		room.setCustomStadium(aloneMap);
	}
	else if (map == classicMap) {
		(classicMap != '') ? room.setCustomStadium(classicMap) : room.setDefaultStadium("Classic");
	}
	else if (map == bigMap) {
		(bigMap != '.') ? room.setCustomStadium(bigMap) : room.setDefaultStadium("Big");
	}
	else {
		room.setCustomStadium(map);
	}
	room.setScoreLimit(scoreLim);
	room.setTimeLimit(timeLim);
}

/* PLAYER FUNCTIONS */

function updateTeams() { // update the players' list and all the teams' list
	players = room.getPlayerList().filter((player) => player.id != 0 && !getAFK(player));
	teamR = players.filter(p => p.team === Team.RED);
	teamB = players.filter(p => p.team === Team.BLUE);
	teamS = players.filter(p => p.team === Team.SPECTATORS);
}

function handleInactivity() { // handles inactivity : players will be kicked after afkLimit
	if (countAFK && (teamR.length + teamB.length) > 1) {
		for (var i = 0; i < teamR.length ; i++) {
			setActivity(teamR[i], getActivity(teamR[i]) + 1);
		}
		for (var i = 0; i < teamB.length ; i++) {
			setActivity(teamB[i], getActivity(teamB[i]) + 1);
		}
	}
	for (var i = 0; i < extendedP.length ; i++) {
		if (extendedP[i][eP.ACT] == 60 * (2/3 * afkLimit)) {
			room.sendChat("[PV] ‚õî @" + room.getPlayer(extendedP[i][eP.ID]).name + ", si no te mueves o env√≠as un mensaje dentro de los siguientes " + Math.floor(afkLimit / 3) + " segundos, seras kickeado!", extendedP[i][eP.ID]);
		}
		if (extendedP[i][eP.ACT] >= 60 * afkLimit) {
			extendedP[i][eP.ACT] = 0;
            if (room.getScores().time <= afkLimit - 0.5) {
				setTimeout(() => { !inChooseMode ? quickRestart() : room.stopGame(); }, 10);
			}
			room.kickPlayer(extendedP[i][eP.ID], "AFK", false);
		}
	}
}

function getAuth(player) {
	return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.AUTH] : null;
}

function getAFK(player) {
	return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.AFK] : null;
}

function setAFK(player, value) {
	extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.AFK] = value);
}

function getActivity(player) {
	return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.ACT] : null;
}

function setActivity(player, value) {
	extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.ACT] = value);
}

function getGK(player) {
	return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.GK] : null;
}

function setGK(player, value) {
	extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.GK] = value);
}

function getMute(player) {
	return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.MUTE] : null;
}

function setMute(player, value) {
	extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.MUTE] = value);
}

/* BALANCE & CHOOSE FUNCTIONS */

function updateRoleOnPlayerIn() {
	updateTeams();
	if (inChooseMode) {
		if (players.length == 6) {
			loadMap(bigMap, scoreLimitBig, timeLimitBig);
		}
		getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
	}
	balanceTeams();
}

function updateRoleOnPlayerOut() {
    updateTeams();
	if (room.getScores() != null) {
		var scores = room.getScores();
		if (players.length >= 2 * maxTeamSize && scores.time >= (5/6) * game.scores.timeLimit && teamR.length != teamB.length) {
			if (teamR.length < teamB.length) {
				if (scores.blue - scores.red == 2) {
					endGame(Team.BLUE);
					room.sendChat("ü§ñ Abandono detectado. Juego terminado ü§ñ");
					setTimeout(() => { room.stopGame(); }, 100);
					return;
				}
			}
			else {
				if (scores.red - scores.blue == 2) {
					endGame(Team.RED);
					room.sendChat("ü§ñ Abandono detectado. Juego terminado ü§ñ");
					setTimeout(() => { room.stopGame(); }, 100);
					return;
				}
			}
		}
	}
	if (inChooseMode) {
		if (players.length == 5) {
			loadMap(classicMap, scoreLimitClassic, timeLimitClassic);
		}
		if (teamR.length == 0 || teamB.length == 0) {
			teamR.length == 0 ? room.setPlayerTeam(teamS[0].id, Team.RED) : room.setPlayerTeam(teamS[0].id, Team.BLUE);
			return;
		}
		if (Math.abs(teamR.length - teamB.length) == teamS.length) {
			room.sendChat("No hay alternativa, d√©jame manejar esta situaci√≥n ...");
			deactivateChooseMode();
			resumeGame();
			var b = teamS.length;
			if (teamR.length > teamB.length) {
				for (var i = 0 ; i < b ; i++) {
					setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.BLUE); }, 5*i);
				}
			}
			else {
				for (var i = 0 ; i < b ; i++) {
					setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.RED); }, 5*i);
				}
			}
			return;
		}
		if (streak == 0 && room.getScores() == null) {
			if (Math.abs(teamR.length - teamB.length) == 2) { // if someone left a team has 2 more players than the other one, put the last chosen guy back in his place so it's fair
				room.sendChat("ü§ñ Equilibrando equipos... ü§ñ");
				teamR.length > teamB.length ? room.setPlayerTeam(teamR[teamR.length - 1].id, Team.SPECTATORS) : room.setPlayerTeam(teamB[teamB.length - 1].id, Team.SPECTATORS);
			}
		}
		if (teamR.length == teamB.length && teamS.length < 2) {
			deactivateChooseMode();
			resumeGame();
			return;
		}
		capLeft ? choosePlayer() : getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
	}
	balanceTeams();
}

function balanceTeams() {
	if (!inChooseMode) {
		if (players.length == 1 && teamR.length == 0) {
            quickRestart();
            loadMap(aloneMap, 0, 0);
			room.setPlayerTeam(players[0].id, Team.RED);
		}
		else if (Math.abs(teamR.length - teamB.length) == teamS.length && teamS.length > 0) {
			const n = Math.abs(teamR.length - teamB.length);
			if (players.length == 2) {
				quickRestart();
				loadMap(classicMap, scoreLimitClassic, timeLimitClassic);
			}
			if (teamR.length > teamB.length) {
				for (var i = 0 ; i < n ; i++) {
					room.setPlayerTeam(teamS[i].id, Team.BLUE);
				}
			}
			else {
				for (var i = 0 ; i < n ; i++) {
					room.setPlayerTeam(teamS[i].id, Team.RED);
				}
			}
		}
		else if (Math.abs(teamR.length - teamB.length) > teamS.length) {
			const n = Math.abs(teamR.length - teamB.length);
			if (players.length == 1) {
				quickRestart();
				loadMap(aloneMap, 0, 0);
				room.setPlayerTeam(players[0].id, Team.RED);
				return;
			}
			else if (players.length == 5) {
				quickRestart();
				loadMap(classicMap, scoreLimitClassic, timeLimitClassic);
			}
			if (players.length == maxTeamSize * 2 - 1) {
				allReds = [];
				allBlues = [];
			}
			if (teamR.length > teamB.length) {
				for (var i = 0 ; i < n ; i++) {
					room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
				}
			}
			else {
				for (var i = 0 ; i < n ; i++) {
					room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
				}
			}
		}
		else if (Math.abs(teamR.length - teamB.length) < teamS.length && teamR.length != teamB.length) {
			room.pauseGame(true);
			activateChooseMode();
			choosePlayer();
		}
		else if (teamS.length >= 2 && teamR.length == teamB.length && teamR.length < maxTeamSize) {
			if (teamR.length == 2) {
				quickRestart();
				loadMap(bigMap, scoreLimitBig, timeLimitBig);
			}
			topBtn();
		}
	}
}

function choosePlayer() {
	clearTimeout(timeOutCap);
	if (teamR.length <= teamB.length && teamR.length != 0) {
		room.sendChat("[PV] Para elegir un jugador, ingrese su n√∫mero en la lista dada o use 'top', 'random' o 'bottom'.", teamR[0].id);
		timeOutCap = setTimeout(function (player) { room.sendChat("[PV] Date prisa @" + player.name + ", solo quedan " + Number.parseInt(chooseTime / 2) + " segundos para elegir !", player.id); timeOutCap = setTimeout(function (player) { room.kickPlayer(player.id, "¬°No elegiste a tiempo!", false); }, chooseTime * 500, teamR[0]); }, chooseTime * 1000, teamR[0]);
	}
	else if (teamB.length < teamR.length && teamB.length != 0) {
		room.sendChat("[PV] Para elegir un jugador, ingrese su n√∫mero en la lista dada o use 'top', 'random' o 'bottom'.", teamB[0].id);
		timeOutCap = setTimeout(function (player) { room.sendChat("[PV] Date prisa @" + player.name + ", solo quedan " + Number.parseInt(chooseTime / 2) + " segundos para elegir !", player.id); timeOutCap = setTimeout(function (player) { room.kickPlayer(player.id, "¬°No elegiste a tiempo!", false); }, chooseTime * 500, teamB[0]); }, chooseTime * 1000, teamB[0]);
	}
	if (teamR.length != 0 && teamB.length != 0) getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
}

function getSpecList(player) {
	var cstm = "[PV] Jugadores : ";
	for (var i = 0 ; i < teamS.length ; i++) {
		if (140 - cstm.length < (teamS[i].name + "[" + (i+1) + "], ").length) {
			room.sendChat(cstm, player.id);
			cstm = "... ";
		}
		cstm += teamS[i].name + "[" + (i+1) + "], ";
	}
	cstm = cstm.substring(0,cstm.length - 2);
	cstm += ".";
	room.sendChat(cstm, player.id);
}

/* STATS FUNCTIONS */

function getLastTouchOfTheBall() {
	const ballPosition = room.getBallPosition();
	updateTeams();
	for (var i = 0; i < players.length; i++) {
		if (players[i].position != null) {
			var distanceToBall = pointDistance(players[i].position, ballPosition);
			if (distanceToBall < triggerDistance) {
				!activePlay ? activePlay = true : null;
				if (lastTeamTouched == players[i].team && lastPlayersTouched[0] != null && lastPlayersTouched[0].id != players[i].id) {
					lastPlayersTouched[1] = lastPlayersTouched[0];
					lastPlayersTouched[0] = players[i];
				}
				lastTeamTouched = players[i].team;
			}
		}
	}
}

function getStats() { // gives possession, ball speed and GK of each team
	if (activePlay) {
		updateTeams();
		lastTeamTouched == Team.RED ? Rposs++ : Bposs++;
		var ballPosition = room.getBallPosition();
		point[1] = point[0];
		point[0] = ballPosition;
		ballSpeed = (pointDistance(point[0], point[1]) * 60 * 60 * 60)/15000;
		var k = [-1, Infinity];
		for (var i = 0; i < teamR.length; i++) {
			if (teamR[i].position.x < k[1]) {
				k[0] = teamR[i];
				k[1] = teamR[i].position.x;
			}
		}
		k[0] != -1 ? setGK(k[0], getGK(k[0]) + 1) : null;
		k = [-1, -Infinity];
		for (var i = 0; i < teamB.length; i++) {
			if (teamB[i].position.x > k[1]) {
				k[0] = teamB[i];
				k[1] = teamB[i].position.x;
			}
		}
		k[0] != -1 ? setGK(k[0], getGK(k[0]) + 1) : null;
		findGK();
	}
}

function updateStats() {
	if (players.length >= 2 * maxTeamSize && (game.scores.time >= (5 / 6) * game.scores.timeLimit || game.scores.red == game.scores.scoreLimit || game.scores.blue == game.scores.scoreLimit) && allReds.length >= maxTeamSize && allBlues.length >= maxTeamSize) {
		var stats;
		for (var i = 0; i < allReds.length; i++) {
			localStorage.getItem(getAuth(allReds[i])) ? stats = JSON.parse(localStorage.getItem(getAuth(allReds[i]))) : stats = [0, 0, 0, 0, "0.00", 0, 0, 0, 0, "0.00", "player", allReds[i].name];
			stats[Ss.GA]++;
			lastWinner == Team.RED ? stats[Ss.WI]++ : lastWinner == Team.BLUE ? stats[Ss.LS]++ : stats[Ss.DR]++;
			stats[Ss.WR] = (100 * stats[Ss.WI] / stats[Ss.GA]).toPrecision(3);
			localStorage.setItem(getAuth(allReds[i]), JSON.stringify(stats));
		}
		for (var i = 0; i < allBlues.length; i++) {
			localStorage.getItem(getAuth(allBlues[i])) ? stats = JSON.parse(localStorage.getItem(getAuth(allBlues[i]))) : stats = [0, 0, 0, 0, "0.00", 0, 0, 0, 0, "0.00", "player", allBlues[i].name];
			stats[Ss.GA]++;
			lastWinner == Team.BLUE ? stats[Ss.WI]++ : lastWinner == Team.RED ? stats[Ss.LS]++ : stats[Ss.DR]++;
			stats[Ss.WR] = (100 * stats[Ss.WI] / stats[Ss.GA]).toPrecision(3);
			localStorage.setItem(getAuth(allBlues[i]), JSON.stringify(stats));
		}
		for (var i = 0; i < game.goals.length; i++) {
			if (game.goals[i].striker != null) {
				if ((allBlues.concat(allReds)).findIndex((player) => player.id == game.goals[i].striker.id) != -1) {
					stats = JSON.parse(localStorage.getItem(getAuth(game.goals[i].striker)));
					stats[Ss.GL]++;
					localStorage.setItem(getAuth(game.goals[i].striker), JSON.stringify(stats));
				}
			}
			if (game.goals[i].assist != null) {
				if ((allBlues.concat(allReds)).findIndex((player) => player.name == game.goals[i].assist.name) != -1) {
					stats = JSON.parse(localStorage.getItem(getAuth(game.goals[i].assist)));
					stats[Ss.AS]++;
					localStorage.setItem(getAuth(game.goals[i].assist), JSON.stringify(stats));
				}
			}
		}
		if (allReds.findIndex((player) => player.id == GKList[0].id) != -1) {
			stats = JSON.parse(localStorage.getItem(getAuth(GKList[0])));
			stats[Ss.GK]++;
			game.scores.blue == 0 ? stats[Ss.CS]++ : null;
			stats[Ss.CP] = (100 * stats[Ss.CS] / stats[Ss.GK]).toPrecision(3);
			localStorage.setItem(getAuth(GKList[0]), JSON.stringify(stats));
		}
		if (allBlues.findIndex((player) => player.id == GKList[1].id) != -1) {
			stats = JSON.parse(localStorage.getItem(getAuth(GKList[1])));
			stats[Ss.GK]++;
			game.scores.red == 0 ? stats[Ss.CS]++ : null;
			stats[Ss.CP] = (100 * stats[Ss.CS] / stats[Ss.GK]).toPrecision(3);
			localStorage.setItem(getAuth(GKList[1]), JSON.stringify(stats));
		}
	}
}

function findGK() {
	var tab = [[-1,""], [-1,""]];
	for (var i = 0; i < extendedP.length ; i++) {
		if (room.getPlayer(extendedP[i][eP.ID]) != null && room.getPlayer(extendedP[i][eP.ID]).team == Team.RED) {
			if (tab[0][0] < extendedP[i][eP.GK]) {
				tab[0][0] = extendedP[i][eP.GK];
				tab[0][1] = room.getPlayer(extendedP[i][eP.ID]);
			}
		}
		else if (room.getPlayer(extendedP[i][eP.ID]) != null && room.getPlayer(extendedP[i][eP.ID]).team == Team.BLUE) {
			if (tab[1][0] < extendedP[i][eP.GK]) {
				tab[1][0] = extendedP[i][eP.GK];
				tab[1][1] = room.getPlayer(extendedP[i][eP.ID]);
			}
		}
	}
	GKList = [tab[0][1], tab[1][1]];
}

setInterval(() => {
	var tableau = [];
	if (statNumber % 5 == 0) {
		Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GA])]); } });
		if (tableau.length < 5) {
			return false;
		}
		tableau.sort(function (a, b) { return b[1] - a[1]; });
		room.sendChat("Partidos Jugados> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1]);
	}
	if (statNumber % 5 == 1) {
		Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.WI])]); } });
		if (tableau.length < 5) {
			return false;
		}
		tableau.sort(function (a, b) { return b[1] - a[1]; });
		room.sendChat("Victorias> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1]);
	}
	if (statNumber % 5 == 2) {
		Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GL])]); } });
		if (tableau.length < 5) {
			return false;
		}
		tableau.sort(function (a, b) { return b[1] - a[1]; });
		room.sendChat("Goles> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1]);
	}
	if (statNumber % 5 == 3) {
		Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.AS])]); } });
		if (tableau.length < 5) {
			return false;
		}
		tableau.sort(function (a, b) { return b[1] - a[1]; });
		room.sendChat("Asistencias> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1]);
	}
	if (statNumber % 5 == 4) {
		Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.CS])]); } });
		if (tableau.length < 5) {
			return false;
		}
		tableau.sort(function (a, b) { return b[1] - a[1]; });
		room.sendChat("CS> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1]);
	}
	statNumber++;
}, statInterval * 60 * 1000);

/* EVENTS */

/* PLAYER MOVEMENT */

room.onPlayerJoin = function(player) {
	extendedP.push([player.id, player.auth, player.conn, false, 0, 0, false]);
		whisper("‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí", player.id, 0x61ddff, "bold", 0);
        whisper("‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí", player.id, 0x61ddff, "bold", 0);
        whisper("‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí", player.id, 0x61ddff, "bold", 0);
        whisper("‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñë‚ïö‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí", player.id, 0x61ddff, "bold", 0);
        whisper("‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí", player.id, 0x61ddff, "bold", 0);
        whisper("‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí", player.id, 0x61ddff, "bold", 0);
		whisper("üì¢     ùòΩùôûùôöùô£ùô´ùôöùô£ùôûùôôùô§ùô® ùôñùô° ùòΩùô§ùô© ùôãùô™ùôóùô°ùôûùôòùô§ ùü∞ùòÉùü∞ ùóïùó∂ùó¥ ùóòùóÆùòÄùòÜ ùôôùôö ùô°ùôñ ùòºùô®ùô§ùôòùôûùôñùôòùôûùô§ùô£ ùôôùôö ùôçùôöùôñùô° ùôéùô§ùôòùôòùôöùôß ùòºùôßùôúùôöùô£ùô©ùôûùô£ùô§  ‚ùó", player.id, 0x61ddff, "bold", 0);
		whisper("üì¢      ùôÄùô®ùôòùôßùôûùôóùôö !ùôùùôöùô°ùô• ùô•ùôñùôßùôñ ùô´ùôöùôß ùô°ùô§ùô® ùôòùô§ùô¢ùôñùô£ùôôùô§ùô® ùôôùôûùô®ùô•ùô§ùô£ùôûùôóùô°ùôöùô®.    ‚ùó", player.id, 0x61e7ff, "bold", 0);
    	whisper("üì¢      ùôëùôûùô®ùôûùô©ùôñ ùô£ùô™ùôöùô®ùô©ùôßùô§ ùôôùôûùô®ùôòùô§ùôßùôô ùô•ùôñùôßùôñ ùô®ùôñùôóùôöùôß ùô¢ùôñùô® ùô®ùô§ùôóùôßùôö ùô£ùô§ùô®ùô§ùô©ùôßùô§ùô®: https://discord.gg/QRuJ3fvDbM     ‚ùó", player.id, 0x61e7ff, "bold", 0);
		updateRoleOnPlayerIn();
		if (localStorage.getItem(player.auth) != null) {
		if (JSON.parse(localStorage.getItem(player.auth))[Ss.RL] != "player") {
			room.setPlayerAdmin(player.id, true);
			room.sendChat((JSON.parse(localStorage.getItem(player.auth))[Ss.RL] == "master" ? "Master " : "Admin ") + player.name + " has connected to the room !");
		}
	}
}

room.onPlayerTeamChange = function(changedPlayer, byPlayer) {
	if (changedPlayer.id == 0) {
		room.setPlayerTeam(0, Team.SPECTATORS);
		return;
	}
	if (getAFK(changedPlayer) && changedPlayer.team != Team.SPECTATORS) {
		room.setPlayerTeam(changedPlayer.id, Team.SPECTATORS);
		room.sendChat(changedPlayer.name + " est√° AFK !");
		return;
	}
	updateTeams();
	if (room.getScores() != null) {
		var scores = room.getScores();
		if (changedPlayer.team != Team.SPECTATORS && scores.time <= (3/4) * scores.timeLimit  && Math.abs(scores.blue - scores.red) < 2) {
			(changedPlayer.team == Team.RED) ? allReds.push(changedPlayer) : allBlues.push(changedPlayer);
		}
	}
	if (changedPlayer.team == Team.SPECTATORS) {
		setActivity(changedPlayer, 0);
	}
	if (inChooseMode && resettingTeams == false && byPlayer.id == 0) {
		if (Math.abs(teamR.length - teamB.length) == teamS.length) {
			deactivateChooseMode();
			resumeGame();
			var b = teamS.length;
			if (teamR.length > teamB.length) {
				for (var i = 0 ; i < b ; i++) {
					setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.BLUE); }, 200*i);
				}
			}
			else {
				for (var i = 0 ; i < b ; i++) {
					setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.RED); }, 200*i);
				}
			}
			return;
		}
		else if ((teamR.length == maxTeamSize && teamB.length == maxTeamSize) || (teamR.length == teamB.length && teamS.length < 2)) {
			deactivateChooseMode();
			resumeGame();
		}
		else if (teamR.length <= teamB.length && redCaptainChoice != "") { // choice remembered
			redCaptainChoice == "top" ? room.setPlayerTeam(teamS[0].id, Team.RED) : redCaptainChoice == "random" ? room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.RED) : room.setPlayerTeam(teamS[teamS.length - 1].id, Team.RED);
			return;
		}
		else if (teamB.length < teamR.length && blueCaptainChoice != "") {
			blueCaptainChoice == "top" ? room.setPlayerTeam(teamS[0].id, Team.BLUE) : blueCaptainChoice == "random" ? room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE) : room.setPlayerTeam(teamS[teamS.length - 1].id, Team.BLUE);
			return;
		}
		else {
			choosePlayer();
		}
	}
}

room.onPlayerLeave = function(player) {
	if (teamR.findIndex((red) => red.id == player.id) == 0 && inChooseMode && teamR.length <= teamB.length) {
		choosePlayer();
		capLeft = true; setTimeout(() => { capLeft = false; }, 10);
	}
	if (teamB.findIndex((blue) => blue.id == player.id) == 0 && inChooseMode && teamB.length < teamR.length) {
		choosePlayer();
		capLeft = true; setTimeout(() => { capLeft = false; }, 10);
	}
	setActivity(player, 0);
    updateRoleOnPlayerOut();
}

room.onPlayerKicked = function(kickedPlayer, reason, ban, byPlayer) {
	ban == true ? banList.push([kickedPlayer.name, kickedPlayer.id]) : null;
}

/* PLAYER ACTIVITY */

room.onPlayerChat = function (player, message) {
	originalMessage = message;
	message = message.split(/ +/);
	player.team != Team.SPECTATORS ? setActivity(player, 0) : null;
	if (["!help"].includes(message[0].toLowerCase())) {
		room.sendAnnouncement("[üìÑ] Comandos : !me, !mostrarstats, !rangos, !games, !wins, !goals, !assists, !cs, !afks, !mutes, !bans.",
		player.id, 0x309D2B,"bold"); player.admin ? room.sendAnnouncement("[üìÑ] Admin : !mute #, !unmute all/#, !clearbans < number = all >, !slow , !endslow", player.id,0x309D2B,"bold") : null;
	}
	else if (["!afk"].includes(message[0].toLowerCase())) {
		if (players.length != 1 && player.team != Team.SPECTATORS) {
			if (player.team == Team.RED && streak > 0 && room.getScores() == null) {
				room.setPlayerTeam(player.id, Team.SPECTATORS);
			}
			else {
				room.sendChat("No puedes ser AFK mientras est√°s en un equipo !", player.id);
				return false;
			}
		}
		else if (players.length == 1 && !getAFK(player)) {
			room.setPlayerTeam(player.id, Team.SPECTATORS);
		}
		setAFK(player, !getAFK(player));
		room.sendChat(player.name + (getAFK(player) ? " est√° AFK !" : " ya est√° listo !"),null, 0xFF7B08)
		getAFK(player) ? updateRoleOnPlayerOut() : updateRoleOnPlayerIn();
	}
	else if (["!afks", "!afklist"].includes(message[0].toLowerCase())) {
		var cstm = "[PV] Lista de AFK : ";
		for (var i = 0; i < extendedP.length; i++) {
			if (room.getPlayer(extendedP[i][eP.ID]) != null && getAFK(room.getPlayer(extendedP[i][eP.ID]))) {
				if (140 - cstm.length < (room.getPlayer(extendedP[i][eP.ID]).name + ", ").length) {
					room.sendChat(cstm, player.id);
					cstm = "... ";
				}
				cstm += room.getPlayer(extendedP[i][eP.ID]).name + ", ";
			}
		}
		if (cstm == "[PV] Lista de AFK : ") {
			room.sendChat("[PV] No hay nadie en la lista de AFK !", player.id);
			return false;
		}
		cstm = cstm.substring(0, cstm.length - 2);
		cstm += ".";
		room.sendChat(cstm, player.id);
	}
	else if (["!me"].includes(message[0].toLowerCase())) {
var stats;
localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, "0.00", 0, 0, 0, 0, "0.00"]; room.sendAnnouncement("[üìÑ] Stats de " + player.name + ": üéÆ Partidos Jugados: " + stats[Ss.GA] + ", ‚úÖ Victorias: " + stats[Ss.
WI] + ", ‚ùå Derrotas: " + stats[Ss.LS] + ", WR: " + stats[Ss.WR] + "%, ‚öΩÔ∏è Goles: " + stats[Ss.GL] + ", üëü Asistencias: " +
stats[Ss.AS] + ", ü§ö GK: " + stats[Ss.GK] + ", ü§ö Vallas: " + stats[Ss.CS] + ", ü§ö CS%: " + stats[Ss.CP] + "%", player.id,
0x73EC59,"bold"); room.sendAnnouncement("„Äåüëì„Äç Este mensaje solamente lo pod√©s ver vos, si quer√©s mostrar tus stats usa el comando'!mostrarstats'!", player.id,0xFF7900,"bold");
return false;
} 
else if (["!mostrarstats"].includes(message[0].toLowerCase())) {
var stats;
localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, "0.00", 0, 0, 0, 0, "0.00"]; room.sendAnnouncement("[üìÑ] El jugador " + player.name + " mostr√≥ sus stats! [!mostrarstats]",null,0xFF7900,"bold")
room.sendAnnouncement("[üìÑ] Stats de " + player.name + ": üéÆ Partidos Jugados: " + stats[Ss.GA] + ", ‚úÖ Victorias: " + stats[Ss.
WI] + ", ‚ùå Derrotas: " + stats[Ss.LS] + ", WR: " + stats[Ss.WR] + "%, ‚öΩÔ∏è Goles: " + stats[Ss.GL] + ", üëü Asistencias: " +
stats[Ss.AS] + ", ü§ö GK: " + stats[Ss.GK] + ", ü§ö Vallas: " + stats[Ss.CS] + ", ü§ö CS%: " + stats[Ss.CP] + "%", null,0x73EC59,
"bold"); return false; }
else if (["!games"].includes(message[0].toLowerCase())) {
var tableau = [];
	try{
Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].
includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GA])]); } });
}
catch{

}
if (tableau.length < 5) {
room.sendAnnouncement("[PV] A√∫n no se han jugado partidos suficientes.", player.id,0xFF0000);
return false;
}
tableau.sort(function (a, b) { return b[1] - a[1]; });
room.sendAnnouncement("[üìÑ] üéÆ Partidos Jugados> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " +
tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " +
tableau[4][0] + ": " + tableau[4][1], player.id,0x73EC59);
return false;
}
	else if (["!wins"].includes(message[0].toLowerCase())) {
var tableau = [];
try{
Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].
includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.WI]
)]); } }); }
catch{

}
if (tableau.length < 5) {
room.sendAnnouncement("[PV] A√∫n no se han jugado partidos suficientes.", player.id,0x73EC59);
return false;
}
tableau.sort(function (a, b) { return b[1] - a[1]; });
room.sendAnnouncement("[üìÑ] ‚úÖ Victorias> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau
[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1], player.id,0x73EC59);

return false;
}
	else if (["!goals"].includes(message[0].toLowerCase())) {
var tableau = [];
try{
Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].
includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GL])]); } });
}
catch{

}
if (tableau.length < 5) {
room.sendAnnouncement("[üìÑ] A√∫n no se han jugado partidos suficientes.", player.id,0x73EC59);
return false;
}
tableau.sort(function (a, b) { return b[1] - a[1]; });
room.sendAnnouncement("[üìÑ] ‚öΩÔ∏è Goles> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1]
[1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4]
[0] + ": " + tableau[4][1], player.id,0x73EC59);
return false;
}
else if (["!assists"].includes(message[0].toLowerCase())) {
var tableau = [];
try{
Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].
includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.AS]
)]); } }); }
catch{

}
if (tableau.length < 5) {
room.sendAnnouncement("[PV] A√∫n no se han jugado partidos suficientes.", player.id);
return false;
}
tableau.sort(function (a, b) { return b[1] - a[1]; });
room.sendAnnouncement("[üìÑ] üëü Asistencias> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " +
tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " +
tableau[4][0] + ": " + tableau[4][1], player.id,0x73EC59);
return false;
}
else if (["!cs"].includes(message[0].toLowerCase())) {
var tableau = [];
try{
Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].
includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.CS]
)]); } }); }
catch{

}
if (tableau.length < 5) {
room.sendAnnouncement("[PV] A√∫n no se han jugado partidos suficientes.", player.id,0x73EC59);
return false;
}
tableau.sort(function (a, b) { return b[1] - a[1]; });
room.sendAnnouncement("[üìÑ] ü§ö Vallas Invictas> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " +
tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " +
tableau[4][0] + ": " + tableau[4][1], player.id,0x73EC59);
return false;
}
	else if (["!rangos"].includes(message[0].toLowerCase())) {
	var tableau = [];
	try{
	Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].
	includes(key) && JSON.parse(localStorage.getItem(key))[Ss.WI] > 400) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.WI])]); } });
	}
	catch{

	}
if (tableau.length < 5) {
room.sendAnnouncement("[PV] A√∫n nadie ha ganado tantos partidos.", player.id,0x73EC59);
return false;
}
tableau.sort(function (a, b) { return b[1] - a[1]; });
room.sendAnnouncement("[üìÑ] ‚úÖ GOATS> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1]
[1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4]
[0] + ": " + tableau[4][1], player.id,0x73EC59);
return false;
}
	else if (["!claim"].includes(message[0].toLowerCase())) {
		if (message[1] == adminPassword) {
			room.setPlayerAdmin(player.id, true);
			var stats;
			localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, "0.00", 0, 0, 0, 0, "0.00", "player", player.name];
			if (stats[Ss.RL] != "master") {
				stats[Ss.RL] = "master";
				room.sendChat(player.name + " es ahora un Super Admin !");
				localStorage.setItem(getAuth(player), JSON.stringify(stats));
			}
		}
	}
	else if (["!setadmin", "!admin"].includes(message[0].toLowerCase())) {
		if (localStorage.getItem(getAuth(player)) && JSON.parse(localStorage.getItem(getAuth(player)))[Ss.RL] == "master") {
			if (message.length >= 2 && message[1][0] == "#") {
				message[1] = message[1].substring(1, message[1].length);
				if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null) {
					var stats;
					localStorage.getItem(getAuth(room.getPlayer(Number.parseInt(message[1])))) ? stats = JSON.parse(localStorage.getItem(getAuth(room.getPlayer(Number.parseInt(message[1]))))) : stats = [0, 0, 0, 0, "0.00", 0, 0, 0, 0, "0.00", "player", room.getPlayer(Number.parseInt(message[1])).name];
					if (stats[Ss.RL] == "player") {
						stats[Ss.RL] = "admin";
						localStorage.setItem(getAuth(room.getPlayer(Number.parseInt(message[1]))), JSON.stringify(stats));
						room.setPlayerAdmin(room.getPlayer(Number.parseInt(message[1])).id, true);
						room.sendChat(room.getPlayer(Number.parseInt(message[1])).name + " ahora es el administrador del host !");
					}
				}
			}
		}
	}
	else if (["!setplayer", "!removeadmin"].includes(message[0].toLowerCase())) {
		if (localStorage.getItem(getAuth(player)) && JSON.parse(localStorage.getItem(getAuth(player)))[Ss.RL] == "master") {
			if (message.length >= 2 && message[1][0] == "#") {
				message[1] = message[1].substring(1, message[1].length);
				if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null) {
					var stats;
					localStorage.getItem(getAuth(room.getPlayer(Number.parseInt(message[1])))) ? stats = JSON.parse(localStorage.getItem(getAuth(room.getPlayer(Number.parseInt(message[1]))))) : stats = [0, 0, 0, 0, "0.00", 0, 0, 0, 0, "0.00", "player", room.getPlayer(Number.parseInt(message[1])).name];
					if (stats[Ss.RL] == "admin") {
						room.sendChat(room.getPlayer(Number.parseInt(message[1])).name + " Ya no es administrador del host !");
						stats[Ss.RL] = "player";
						localStorage.setItem(getAuth(room.getPlayer(Number.parseInt(message[1]))), JSON.stringify(stats));
						room.setPlayerAdmin(room.getPlayer(Number.parseInt(message[1])).id, false);
					}
				}
			}
		}
	}
	else if (["!mutes", "!mutelist"].includes(message[0].toLowerCase())) {
		var cstm = "[PV] Lista de muteados : ";
		for (var i = 0; i < extendedP.length; i++) {
			if (room.getPlayer(extendedP[i][eP.ID]) != null && getMute(room.getPlayer(extendedP[i][eP.ID]))) {
				if (140 - cstm.length < (room.getPlayer(extendedP[i][eP.ID]).name + "[" + (extendedP[i][eP.ID]) + "], ").length) {
					room.sendChat(cstm, player.id);
					cstm = "... ";
				}
				cstm += room.getPlayer(extendedP[i][eP.ID]).name + "[" + (extendedP[i][eP.ID]) + "], ";
			}
		}
		if (cstm == "[PV] Lista de Muteados : ") {
			room.sendChat("[PV] No hay nadie en la lista de muteados !", player.id);
			return false;
		}
		cstm = cstm.substring(0, cstm.length - 2);
		cstm += ".";
		room.sendChat(cstm, player.id);
	}
	else if (["!mute"].includes(message[0].toLowerCase())) {
		if (player.admin) {
			updateTeams();
			var timeOut;
			if (!Number.isNaN(Number.parseInt(message[1])) && message.length > 1) {
				if (Number.parseInt(message[1]) > 0) {
					timeOut = Number.parseInt(message[1]) * 60 * 1000;
				}
				else {
					timeOut = 3 * 60 * 1000;
				}
				if (message[2].length > 1 && message[2][0] == "#") {
					message[2] = message[2].substring(1, message[2].length);
					if (!Number.isNaN(Number.parseInt(message[2])) && room.getPlayer(Number.parseInt(message[2])) != null) {
						if (room.getPlayer(Number.parseInt(message[2])).admin || getMute(room.getPlayer(Number.parseInt(message[2])))) {
							return false;
						}
						setTimeout(function (player) { setMute(player, false); }, timeOut, room.getPlayer(Number.parseInt(message[2])));
						setMute(room.getPlayer(Number.parseInt(message[2])), true);
						room.sendChat(room.getPlayer(Number.parseInt(message[2])).name + " ha sido muteado por " + (timeOut / 60000) + " minutos !");
					}
				}
			}
			else if (Number.isNaN(Number.parseInt(message[1]))) {
				if (message[1].length > 1 && message[1][0] == "#") {
					message[1] = message[1].substring(1, message[1].length);
					if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null) {
						if (room.getPlayer(Number.parseInt(message[1])).admin || getMute(room.getPlayer(Number.parseInt(message[1])))) {
							return false;
						}
						setTimeout(function (player) { setMute(player, false); }, 3 * 60 * 1000, room.getPlayer(Number.parseInt(message[1])));
						setMute(room.getPlayer(Number.parseInt(message[1])), true);
						room.sendChat(room.getPlayer(Number.parseInt(message[1])).name + " Te han muteado por 3 minutos!");
					}
				}
			}
		}
	}
	else if (["!unmute"].includes(message[0].toLowerCase())) {
		if (player.admin && message.length >= 2) {
			if (message[1] == "all") {
				extendedP.forEach((ePlayer) => { ePlayer[eP.MUTE] = false; });
				room.sendChat("Se ha limpiado la lista de muteados");
			}
			else if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null && getMute(room.getPlayer(Number.parseInt(message[1])))) {
				setMute(room.getPlayer(Number.parseInt(message[1])), false);
				room.sendChat(room.getPlayer(Number.parseInt(message[1])).name + " ha sido desmuteado !");
			}
			else if (Number.isNaN(Number.parseInt(message[1]))) {
				if (message[1].length > 1 && message[1][0] == "#") {
					message[1] = message[1].substring(1, message[1].length);
					if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null && getMute(room.getPlayer(Number.parseInt(message[1])))) {
						setMute(room.getPlayer(Number.parseInt(message[1])), false);
						room.sendChat(room.getPlayer(Number.parseInt(message[1])).name + " ha sido desmuteado!");
					}
				}
			}
		}
	}
	else if (["!slow"].includes(message[0].toLowerCase())) {
		if (player.admin) {
			if (message.length == 1) {
				slowMode = 2;
				room.sendChat("Modo lento activado (2 segundos)!");
			}
			else if (message.length == 2) {
				if (!Number.isNaN(Number.parseInt(message[1]))) {
					if (Number.parseInt(message[1]) > 0) {
						slowMode = Number.parseInt(message[1]);
						room.sendChat(slowMode + " segundos, modo lento activado !");
						return false;
					}
				}
				slowMode = 2;
				room.sendChat("Modo lento activado (2 segundos)!");
			}
		}
	}
	else if (["!endslow"].includes(message[0].toLowerCase())) {
		if (player.admin) {
			slowMode != 0 ? room.sendChat("Modo lento terminado.") : null;
			slowMode = 0;
		}
	}
	else if (["!banlist", "!bans"].includes(message[0].toLowerCase())) {
		if (banList.length == 0) {
			room.sendChat("[PV] No hay nadie en la lista de baneados!", player.id);
			return false;
		}
		var cstm = "[PV] Lista de baneados : ";
		for (var i = 0; i < banList.length; i++) {
			if (140 - cstm.length < (banList[i][0] + "[" + (banList[i][1]) + "], ").length) {
				room.sendChat(cstm, player.id);
				cstm = "... ";
			}
			cstm += banList[i][0] + "[" + (banList[i][1]) + "], ";
		}
		cstm = cstm.substring(0, cstm.length - 2);
		cstm += ".";
		room.sendChat(cstm, player.id);
	}
	else if (["!clearbans"].includes(message[0].toLowerCase())) {
		if (player.admin) {
			if (message.length == 1) {
				room.clearBans();
				room.sendChat("Bans removidos!");
				banList = [];
			}
			if (message.length == 2) {
				if (!Number.isNaN(Number.parseInt(message[1]))) {
					if (Number.parseInt(message[1]) > 0) {
						ID = Number.parseInt(message[1]);
						room.clearBan(ID);
						if (banList.length != banList.filter((array) => array[1] != ID)) {
							room.sendChat(banList.filter((array) => array[1] == ID)[0][0] + " ha sido baneado del host !");
						}
						setTimeout(() => { banList = banList.filter((array) => array[1] != ID); }, 20);
					}
				}
			}
		}
	}
	else if (["!bb", "!bye", "!cya", "!gn"].includes(message[0].toLowerCase())) {
		room.kickPlayer(player.id, "Bye !", false);
	}
	if (teamR.length != 0 && teamB.length != 0 && inChooseMode) {
		if (player.id == teamR[0].id || player.id == teamB[0].id) { // we care if it's one of the captains choosing
			if (teamR.length <= teamB.length && player.id == teamR[0].id) { // we care if it's red turn && red cap talking
				if (["top", "auto"].includes(message[0].toLowerCase())) {
					room.setPlayerTeam(teamS[0].id, Team.RED);
					redCaptainChoice = "top";
					clearTimeout(timeOutCap);
					room.sendChat(player.name + " elegiste Top !");
					return false;
				}
				else if (["random", "rand"].includes(message[0].toLowerCase())) {
					var r = getRandomInt(teamS.length);
					room.setPlayerTeam(teamS[r].id, Team.RED);
					redCaptainChoice = "random";
					clearTimeout(timeOutCap);
					room.sendChat(player.name + " elegiste Random !");
					return false;
				}
				else if (["bottom", "bot"].includes(message[0].toLowerCase())) {
					room.setPlayerTeam(teamS[teamS.length - 1].id, Team.RED);
					redCaptainChoice = "bottom";
					clearTimeout(timeOutCap);
					room.sendChat(player.name + " elegiste Bottom !");
					return false;
				}
				else if (!Number.isNaN(Number.parseInt(message[0]))) {
					if (Number.parseInt(message[0]) > teamS.length || Number.parseInt(message[0]) < 1) {
						room.sendChat("[PV] El n√∫mero que elegiste es inv√°lido !", player.id);
						return false;
					}
					else {
						room.setPlayerTeam(teamS[Number.parseInt(message[0]) - 1].id, Team.RED);
						room.sendChat(player.name + " eligi√≥ a " + teamS[Number.parseInt(message[0]) - 1].name + " !");
						return false;
					}
				}
			}
			if (teamR.length > teamB.length && player.id == teamB[0].id) { // we care if it's red turn && red cap talking
				if (["top", "auto"].includes(message[0].toLowerCase())) {
					room.setPlayerTeam(teamS[0].id, Team.BLUE);
					blueCaptainChoice = "top";
					clearTimeout(timeOutCap);
					room.sendChat(player.name + " seleccion√≥ Top !");
					return false;
				}
				else if (["random", "rand"].includes(message[0].toLowerCase())) {
					room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
					blueCaptainChoice = "random";
					clearTimeout(timeOutCap);
					room.sendChat(player.name + " seleccion√≥ Random !");
					return false;
				}
				else if (["bottom", "bot"].includes(message[0].toLowerCase())) {
					room.setPlayerTeam(teamS[teamS.length - 1].id, Team.BLUE);
					blueCaptainChoice = "bottom";
					clearTimeout(timeOutCap);
					room.sendChat(player.name + " seleccion√≥ Bottom !");
					return false;
				}
				else if (!Number.isNaN(Number.parseInt(message[0]))) {
					if (Number.parseInt(message[0]) > teamS.length || Number.parseInt(message[0]) < 1) {
						room.sendChat("[PV] El n√∫mero que elegiste es inv√°lido !", player.id);
						return false;
					}
					else {
						room.setPlayerTeam(teamS[Number.parseInt(message[0]) - 1].id, Team.BLUE);
						room.sendChat(player.name + " eligi√≥ " + teamS[Number.parseInt(message[0]) - 1].name + " !");
						return false;
					}
				}
			}
		}
	}
	if (localStorage.getItem(getAuth(player))){
	stats = JSON.parse(localStorage.getItem(getAuth(player)));
	var announcement = "";
	var chatColor = "";
	if (stats[Ss.WI] > 399){
	announcement += "üëë „ÄåùëªùëØùë¨ ùë≤ùë∞ùëµùëÆ„Äç"
	chatColor = "0xFF8000"
	} else if (stats[Ss.WI] > 199){
	announcement += "üíé „Äåùó¶ùòÇùóΩùó≤ùóø-ùóòùòÄùòÅùóøùó≤ùóπùóπùóÆ„Äç"
	chatColor = "0x0040FF"
	} else if (stats[Ss.WI] > 179){
	announcement += "üí´ „ÄåùóòùòÄùòÅùóøùó≤ùóπùóπùóÆ„Äç"
	chatColor = "0xFF7900"
	} else if (stats[Ss.WI] > 159){
	announcement += "üí• „ÄåùóñùóÆùó∫ùóΩùó≤ùóºùóª„Äç"
	chatColor = "0xFFFF00"
	} else if (stats[Ss.WI] > 129){
	announcement += "üëë „ÄåùóñùóøùóÆùó∞ùó∏„Äç"
	chatColor = "0xFFC375"
	} else if (stats[Ss.WI] > 89){
	announcement += "ü•á „Äåùóüùó≤ùòÜùó≤ùóªùó±ùóÆ„Äç"
	chatColor = "0xBFFF00"
	} else if (stats[Ss.WI] > 69){
	announcement += "ü•à „ÄåùêÑùê±ùê©ùêûùê´ùê≠ùê®„Äç"
	chatColor = "0xEC77CE"
	} else if (stats[Ss.WI] > 59){
	announcement += "üí™ „Äåùó•ùó≤ùòÉùó≤ùóπùóÆùó∞ùó∂ùóºùóª„Äç"
	chatColor = "0xFA58DF"
	} else if (stats[Ss.WI] > 44){
	announcement += "üëΩ „Äåùó©ùó≤ùòÅùó≤ùóøùóÆùóªùóº„Äç"
	chatColor = "0x73EC59"
	} else if (stats[Ss.WI] > 34){
	announcement += "ü•ä „Äåùóúùó∫ùóΩùóÆùóøùóÆùóØùóπùó≤„Äç"
	chatColor = "0xFE2E2E"
	} else if (stats[Ss.WI] > 24){
	announcement += "‚öΩ „Äåùó£ùóøùóºùó≥ùó≤ùòÄùó∂ùóºùóªùóÆùóπ„Äç"
	chatColor = "0x04B404"
	} else if (stats[Ss.WI] > 14){
	announcement += "üòé „ÄåùóîùóΩùóøùó≤ùóªùó±ùó∂ùòá„Äç"
	chatColor = "0x2EFEF7"
	} else if (stats[Ss.WI] > 4){
	announcement += "üéñÔ∏è „Äåùó£ùóøùó∂ùóªùó∞ùó∂ùóΩùó∂ùóÆùóªùòÅùó≤„Äç"
	chatColor = "0xDDD4DB"
	} else {
	announcement += "üéä „Äåùóúùóªùó∂ùó∞ùó∂ùóÆùóªùòÅùó≤„Äç"
	chatColor = "0xDDD4DB"
	}
	
	if (player.admin){
	announcement += "„Äåüåü„Äç";
	chatColor = "0xF8FF00";
	}
	announcement += player.name + ": " + originalMessage;
	room.sendAnnouncement(announcement, null, chatColor);
	return false;
	}

	if (message[0][0] == "!") {
		return false;
	}
	if (getMute(player)) {
		room.sendChat("Usted est√° muteado.", player.id);
		return false;
	}
	if (slowMode > 0) {
		if (!player.admin) {
			if (!SMSet.has(player.id)) {
				SMSet.add(player.id);
				setTimeout((number) => { SMSet.delete(number); }, slowMode * 1000, player.id);
			}
			else {
				return false;
			}
		}
	}
}

room.onPlayerActivity = function(player) {
	setActivity(player, 0);
}

room.onPlayerBallKick = function(player) {
	if (lastPlayersTouched[0] == null || player.id != lastPlayersTouched[0].id) {
		!activePlay ? activePlay = true : null;
		lastTeamTouched = player.team;
		lastPlayersTouched[1] = lastPlayersTouched[0];
		lastPlayersTouched[0] = player;
	}
}

/* GAME MANAGEMENT */

room.onGameStart = function(byPlayer) {
	game = new Game(Date.now(), room.getScores(), []);
	countAFK = true;
	activePlay = false;
	goldenGoal = false;
	endGameVariable = false;
	lastPlayersTouched = [null, null];
    Rposs = 0;
	Bposs = 0;
	GKList = [];
	allReds = [];
	allBlues = [];
	if (teamR.length == maxTeamSize && teamB.length == maxTeamSize) {
		for (var i = 0; i < maxTeamSize; i++) {
			allReds.push(teamR[i]);
			allBlues.push(teamB[i]);
		}
	}
	for (var i = 0; i < extendedP.length; i++) {
		extendedP[i][eP.GK] = 0;
		extendedP[i][eP.ACT] = 0;
		room.getPlayer(extendedP[i][eP.ID]) == null ? extendedP.splice(i, 1) : null;
	}
	deactivateChooseMode();
}

room.onGameStop = function(byPlayer) {
	if (byPlayer.id == 0 && endGameVariable) {
		updateTeams();
		if (inChooseMode) {
			if (players.length == 2 * maxTeamSize) {
				inChooseMode = false;
				resetBtn();
				for (var i = 0; i < maxTeamSize; i++) {
					setTimeout(() => { randomBtn(); }, 400*i);
				}
				setTimeout(() => { room.startGame(); }, 2000);
			}
			else {
				if (lastWinner == Team.RED) {
					blueToSpecBtn();
				}
				else if (lastWinner == Team.BLUE) {
					redToSpecBtn();
					blueToRedBtn();
				}
				else {
					resetBtn();
				}
				setTimeout(() => { topBtn(); }, 500);
			}
		}
		else {
			if (players.length == 2) {
				if (lastWinner == Team.BLUE) {
					room.setPlayerTeam(teamB[0].id, Team.RED);
					room.setPlayerTeam(teamR[0].id, Team.BLUE);
				}
				setTimeout(() => { room.startGame(); }, 2000);
			}
			else if (players.length == 3 || players.length >= 2 * maxTeamSize + 1) {
				if (lastWinner == Team.RED) {
					blueToSpecBtn();
				}
				else {
					redToSpecBtn();
					blueToRedBtn();
				}
				setTimeout(() => { topBtn(); }, 200);
				setTimeout(() => { room.startGame(); }, 2000);
			}
			else if (players.length == 4) {
				resetBtn();
				setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); }, 500); }, 500);
				setTimeout(() => { room.startGame(); }, 2000);
			}
			else if (players.length == 5 || players.length >= 2 * maxTeamSize + 1) {
				if (lastWinner == Team.RED) {
					blueToSpecBtn();
				}
				else {
					redToSpecBtn();
					blueToRedBtn();
				}
				setTimeout(() => { topBtn(); }, 200);
				activateChooseMode();
			}
			else if (players.length == 6) {
				resetBtn();
				setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); }, 500); }, 500); }, 500);
				setTimeout(() => { room.startGame(); }, 2000);
			}
		}
	}
}

room.onGamePause = function(byPlayer) {
}

room.onGameUnpause = function (byPlayer) {
	if (teamR.length == 4 && teamB.length == 4 && inChooseMode || (teamR.length == teamB.length && teamS.length < 2 && inChooseMode)) {
		deactivateChooseMode();
	}
}

room.onTeamGoal = function(team) {
	activePlay = false;
	countAFK = false;
	const scores = room.getScores();
	game.scores = scores;
	var frasegol = frasesgoles[(Math.random() * frasesgoles.length) | 0]
    var fraseasis = frasesasis[(Math.random() * frasesasis.length) | 0]
    var fraseautogol = frasesautogol[(Math.random() * frasesautogol.length) | 0]
	if (lastPlayersTouched[0] != null && lastPlayersTouched[0].team == team) {
		if (lastPlayersTouched[1] != null && lastPlayersTouched[1].team == team) {
			room.sendChat("GOOOOOOOOOOOOOOOOL ‚öΩ " + getTime(scores) + frasegol + lastPlayersTouched[0].name + fraseasis + lastPlayersTouched[1].name + ". Velocidad de tiro : " + ballSpeed.toPrecision(4).toString() + "km/h " + (team == Team.RED ? "üî¥" : "üîµ"));
			game.goals.push(new Goal(scores.time, team, lastPlayersTouched[0], lastPlayersTouched[1]));
		}
		else {
			room.sendChat("GOOOOOOOOOOOOOOOOL ‚öΩ " + getTime(scores) + frasegol + lastPlayersTouched[0].name + " ! Velocidad de tiro : " + ballSpeed.toPrecision(4).toString() + "km/h " + (team == Team.RED ? "üî¥" : "üîµ"));
			game.goals.push(new Goal(scores.time, team, lastPlayersTouched[0], null));
		}
	}
	else {
		room.sendChat("üòÇ GOL EN CONTRA! " + getTime(scores) + fraseautogol + lastPlayersTouched[0].name + " ! Velocidad de tiro : " + ballSpeed.toPrecision(4).toString() + "km/h " + (team == Team.RED ? "üî¥" : "üîµ"));
		game.goals.push(new Goal(scores.time, team, null, null));
	}
	if (scores.scoreLimit != 0 && (scores.red == scores.scoreLimit || scores.blue == scores.scoreLimit && scores.blue > 0 || goldenGoal == true)) {
		endGame(team);
		goldenGoal = false;
		setTimeout(() => { room.stopGame(); }, 1000);
	}
}

room.onPositionsReset = function() {
	countAFK = true;
	lastPlayersTouched = [null, null];
}

/* MISCELLANEOUS */

room.onRoomLink = function(url) {
}

room.onPlayerAdminChange = function (changedPlayer, byPlayer) {
	if (getMute(changedPlayer) && changedPlayer.admin) {
		room.sendChat(changedPlayer.name + " ha sido desmuteado.");
		setMute(changedPlayer, false);
	}
	if (byPlayer.id != 0 && localStorage.getItem(getAuth(byPlayer)) && JSON.parse(localStorage.getItem(getAuth(byPlayer)))[Ss.RL] == "admin") {
		room.sendChat("No tienes permiso para nombrar a un jugador como Administrador !", byPlayer.id);
		room.setPlayerAdmin(changedPlayer.id, false);
	}
}

room.onStadiumChange = function(newStadiumName, byPlayer) {
}

room.onGameTick = function() {
	checkTime();
	getLastTouchOfTheBall();
	getStats();
	handleInactivity();
	PublicitaHelp();
	PublicitaLiga();
	PublicitaDiscord();
	PublicitaDiscord2();
}

function whisper(msg, targetId, color, style, sound) {
	if (color == null) {
		color = 0x66C7FF;
	}
	if (style == null) {
		style = "normal";
	}
	if (sound == null) {
		sound = 0;
	}
	room.sendAnnouncement(msg, targetId, color, style, sound);
	if (room.getPlayer(targetId) != null) {
		console.log("Whisper -> " + room.getPlayer(targetId).name + ": " + msg);
	}
}

function PublicitaDiscord(player) {
var scores = room.getScores();
if (scores.time > 20 && !isTimeAddedShownseis) {
room.sendAnnouncement(" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÑ ‚ñÄ‚ñà‚ñÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÑ ", null, 0x9250FD, "bold")
room.sendAnnouncement(" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñë ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñÑ ‚ñí‚ñà‚ñë‚ñë‚ñë ‚ñí‚ñà‚ñë‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ ‚ñí‚ñà‚ñë‚ñí‚ñà ", null, 0x8466FD, "bold")
room.sendAnnouncement(" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ ‚ñÑ‚ñà‚ñÑ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ ", null, 0x7B73FD, "bold");
room.sendAnnouncement(" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØüí¨ https://discord.gg/QRuJ3fvDbM ‚¨Ö‚¨Ö‚¨Ö ùóîùó¶ùó¢ùóñùóúùóîùóñùóúùó¢ÃÅùó° ùóóùóò ùó•ùóòùóîùóü ùó¶ùó¢ùóñùóñùóòùó• ùóîùó•ùóöùóòùó°ùóßùóúùó°ùó¢", null, 0xF6FF43, "bold");
isTimeAddedShownseis = true;
}
}

function PublicitaHelp(player) {
var scores = room.getScores();
if (scores.time > 10 && !isTimeAddedShowncinco) {
room.sendAnnouncement("„Äåüì£„Äç ¬°ùó®ùòÄùóÆ '!help' ùóΩùóÆùóøùóÆ ùòÉùó≤ùóø ùóπùóÆ ùóπùó∂ùòÄùòÅùóÆ ùó±ùó≤ ùó∞ùóºùó∫ùóÆùóªùó±ùóºùòÄ ùó±ùó∂ùòÄùóΩùóºùóªùó∂ùóØùóπùó≤ùòÄ!", player, 0xd733ff, "bold", 0);
isTimeAddedShowncinco = true;
}
}

function PublicitaDiscord2(player) {
var scores = room.getScores();
if (scores.time > 20 && !isTimeAddedShownseis) {
room.sendAnnouncement(`üåü‚ÄãüèÜ‚Äã ùóüùó¢ùó¶ ùóóùóúùóîùó¶ ùó©ùóúùóòùó•ùó°ùóòùó¶ ùóòùó°ùóßùó•ùóòùóöùóîùó†ùó¢ùó¶ ùóüùó¢ùó¶ ùó£ùó•ùóòùó†ùóúùó¢ùó¶ ùó¶ùóòùó†ùóîùó°ùóîùóüùóòùó¶ ùóòùó° ùó°ùó®ùóòùó¶ùóßùó•ùó¢ ùóóùóúùó¶ùóñùó¢ùó•ùóó ùó¢ùóôùóúùóñùóúùóîùóü‚ùó`, player, 0xd733ff, "bold", 0)
isTimeAddedShownseis = true;
}
}

function PublicitaLiga(player) {
var scores = room.getScores();
if (scores.time > 80 && !isTimeAddedShowncuatro) {
room.sendAnnouncement("„Äåüì£„Äç ùóîùó•ùó¶ùóî ùó≤ùòÄ ùòÇùóªùóÆ ùóπùó∂ùó¥ùóÆ ùóµùó∂ùòÄùòÅùóºùóøùó∂ùó∞ùóÆùó∫ùó≤ùóªùòÅùó≤ ùó∞ùóºùóªùòÄùóÆùó¥ùóøùóÆùó±ùóÆ ùó∞ùóºùó∫ùóº ùóªùòÇùó∫ùó≤ùóøùóº ùü≠ ùó≤ùóª ùó•ùó≤ùóÆùóπ ùó¶ùóºùó∞ùó∞ùó≤ùóø, ùóªùòÇùó≤ùòÄùòÅùóøùóÆ ùó∂ùóªùó∫ùó≤ùóªùòÄùóÆ ùóµùó∂ùòÄùòÅùóºùóøùó∂ùóÆ, ùó∞ùóºùó∫ùóΩùóøùóºùó∫ùó∂ùòÄùóº ùòÜ ùóΩùóøùóºùó¥ùóøùó≤ùòÄùóº ùóµùóÆùó∞ùó∂ùóÆ ùóµùóÆùòÖùóØùóÆùóπùóπ ùóªùóºùòÄ ùóπùóπùó≤ùòÉùóº ùóÆ ùóΩùóøùó≤ùòÄùòÅùóÆùóø ùó±ùó∂ùòÄùòÅùó∂ùóªùòÅùóÆùòÄ ùóΩùóøùóºùóΩùòÇùó≤ùòÄùòÅùóÆùòÄ ùó±ùó≤ ùó∑ùòÇùó≤ùó¥ùóº ùóÆ ùó∞ùóÆùó±ùóÆ ùóΩùó≤ùóøùòÄùóºùóªùóÆ. ùó§ùòÇùó≤ ùó≤ùòÄùòÅùóÆùòÄ ùó≤ùòÄùóΩùó≤ùóøùóÆùóªùó±ùóº ùóΩùóÆùóøùóÆ ùòÄùó≤ùóø ùóΩùóÆùóøùòÅùó≤ ùó±ùó≤ ùóπùóÆ ùó∫ùó≤ùó∑ùóºùóø ùóπùó∂ùó¥ùóÆ ùó±ùó≤ùóπ ùó∫ùòÇùóªùó±ùóº‚ùì ùó®ùó°ùóúùóßùóò‚ùó ùóµùòÅùòÅùóΩùòÄ://ùó±ùó∂ùòÄùó∞ùóºùóøùó±.ùó¥ùó¥/ùó§ùó•ùòÇùóùùüØùó≥ùòÉùóóùóØùó†", player, 0xd733ff, "bold", 0);
isTimeAddedShowncuatro = true;
}
}
